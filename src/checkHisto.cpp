// Program for comparing the contents of the ROOT histograms generated by
// the reference CPU and CUDA implementations.


#include <iostream>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "TFile.h"
#include "TH1F.h"

using namespace std;


//
// Show this program usage
//
void Usage(const char* path)
{
    const char* slash = strrchr(path, '/');
    const char* progName = (slash != NULL) ? ++slash : path;
    cout << "Usage: " << progName << " <file 1> <file 2>" << endl;
}


//
// Main
//
int main(int argc, const char* argv[])
{
    // Parse command line
    if (argc < 3) {
        Usage(argv[0]);
        return 1;
    }

    // Open input files
    const char* fileName1 = argv[1];
    const char* fileName2 = argv[2];

    TFile* file1 = TFile::Open(fileName1);
    if (file1 == 0) {
        cerr << "could not open file '" << fileName1 << "'" << endl;
        return 2;
    }

    TFile* file2 = TFile::Open(fileName2);
    if (file2 == 0) {
        cerr << "could not open file '" << fileName2 << "'" << endl;
        return 2;
    }

    // Compare both histograms
    const char* histoKey = "galgal";
    TH1F* histo1 = (TH1F*)file1->Get(histoKey);
    TH1F* histo2 = (TH1F*)file2->Get(histoKey);
    cout << "Histogram comparison:" << endl
         << "   file1: '" << fileName1 << "'" << endl
         << "   file2: '" << fileName2 << "'" << endl;
    int entries1 = (int)histo1->GetEntries();
    int entries2 = (int)histo2->GetEntries();
    if (entries1 != entries2) {
        cout << "Number of entries:" << endl
             << "   1: " << entries1 << endl
             << "   2: " << entries2 << endl
             << "   difference: " << abs(entries1 - entries2) << endl;
    }

    int sum1 = (int)histo1->GetSumOfWeights();
    int sum2 = (int)histo2->GetSumOfWeights();
    if (sum1 != sum2) {
       cout << "Sum of Weights:" << endl
            << "   1: " << sum1 << endl
            << "   2: " << sum2 << endl
            << "   difference: " << abs(sum1 - sum2) << endl;
    }  

    int integral1 = (int)histo1->GetEntries();
    int integral2 = (int)histo2->GetEntries();
    if (integral1 != integral2) {
        cout << "Integral:" << endl
             << "   1: " << integral1 << endl
             << "   2: " << integral2 << endl
             << "   difference: " << abs(integral1 - integral2) << endl;
        cout << "Undeflow bin:" << endl
             << "   1: " << (int)histo1->GetBinContent(0) << endl
             << "   2: " << (int)histo2->GetBinContent(0) << endl;
        cout << "Overflow bin:" << endl
             << "   1: " << (int)histo1->GetBinContent(histo1->GetNbinsX() + 1) << endl
             << "   2: " << (int)histo2->GetBinContent(histo2->GetNbinsX() + 1) << endl;
    }


    if (histo1->GetNbinsX() != histo2->GetNbinsX()) {
        cerr << "ERROR: number of bins differ" << endl
             << "   1: " << histo1->GetNbinsX() << endl
             << "   2: " << histo2->GetNbinsX() << endl;
        return 2;
    }

    // Compare binwise contents of the two input histograms, ignoring underfow
    // and overflow bins.
    TH1F* binHisto = new TH1F("bindiff", "Bin-wise differences", 1000, 0.0f, 1000.f);
    for (int bin=1; bin <= histo1->GetNbinsX(); bin++) {
        int content1 = (int)histo1->GetBinContent(bin);
        int content2 = (int)histo2->GetBinContent(bin);

        // Only add an entry if there is a difference among these two bins.
        if (content1 != content2) {
//            if ( abs(content1-content2) > 10) {
//                cout << bin << " " << content1 << " " << content2 << endl;
//            }
            binHisto->Fill(abs(content1 - content2));
        }
    }
    cout << "Summary of bin differences:" << endl
         << "   Total number of bins with differences: " << (int)binHisto->Integral() << endl
         << "   Mean of the differences: " << binHisto->GetMean() << endl
         << "   RMS of the differences: "  << binHisto->GetRMS() << endl;

    // Close files
    file1->Close();
    file2->Close();

    return 0;
}
