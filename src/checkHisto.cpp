// Program for comparing the contents of the ROOT histograms generated by
// the reference CPU and CUDA implementations.


#include <iostream>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "TFile.h"
#include "TH1F.h"

using namespace std;


//
// Show this program usage
//
void Usage(const char* path)
{
    const char* slash = strrchr(path, '/');
    const char* progName = (slash != NULL) ? ++slash : path;
    cout << "Usage: " << progName << " <file 1> <file 2>" << endl;
}


//
// Main
//
int main(int argc, const char* argv[])
{
    // Parse command line
    if (argc < 3) {
        Usage(argv[0]);
        return 1;
    }

    // Open input files
    const char* fileName1 = argv[1];
    const char* fileName2 = argv[2];

    TFile* file1 = TFile::Open(fileName1);
    if (file1 == 0) {
        cerr << "could not open file '" << fileName1 << "'" << endl;
        return 2;
    }

    TFile* file2 = TFile::Open(fileName2);
    if (file2 == 0) {
        cerr << "could not open file '" << fileName2 << "'" << endl;
        return 2;
    }

    // Compare both histograms
    const char* histoKey = "galgal";
    TH1F* histo1 = (TH1F*)file1->Get(histoKey);
    TH1F* histo2 = (TH1F*)file2->Get(histoKey);
    cout << "Histogram comparison:" << endl
         << "   file1: '" << fileName1 << "'"
         << endl
         << "   file2: '" << fileName2 << "'"
         << endl;
    cout << "Number of entries:" << endl
         << "   1: " << (int)histo1->GetEntries()
         << endl
         << "   2: " << (int)histo2->GetEntries()
         << endl;
    cout << "Integral:" << endl
         << "   1: " << histo1->Integral()
         << endl
         << "   2: " << histo2->Integral()
         << endl;

    if (histo1->GetNbinsX() != histo2->GetNbinsX()) {
        cerr << "ERROR: number of bins differ" << endl
             << "   1: " << histo1->GetNbinsX()
             << endl
             << "   2: " << histo2->GetNbinsX()
             << endl;
        return 2;
    }

    // Compare bin-wise: ignore underfow and overflow bins
    for (int bin=1; bin <= histo1->GetNbinsX(); bin++) {
        int content1 = (int)histo1->GetBinContent(bin);
        int content2 = (int)histo2->GetBinContent(bin);
        if (content1 != content2) {
            cerr << "ERROR: bin contents differ for bin " << bin << endl
                 << "   1: " << content1
                 << endl
                 << "   2: " << content2
                 << endl;
            return 2;
        }
    }

    // Close files
    file1->Close();
    file2->Close();

    return 0;
}
